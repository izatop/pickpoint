/// <reference path="./request.ts" />
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _request = require('./request');

var _datatype = require('./datatype');

var DataType = _interopRequireWildcard(_datatype);

var _rate = require('./rate');

var _rate2 = _interopRequireDefault(_rate);

var API = (function () {
    function API(login, password) {
        var _this = this;

        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, API);

        this.client = new _request.Client();
        this.credentials = { login: login, password: password };
        this.client.setSessionHandler(function () {
            return _this.login();
        });
    }

    _createClass(API, [{
        key: 'login',
        value: function login() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                if (_this2.session) {
                    resolve(_this2.session);
                } else {
                    _this2.client.call({
                        method: 'POST',
                        url: 'login',
                        data: {
                            Login: _this2.credentials.login,
                            Password: _this2.credentials.password
                        }
                    }).then(function (result) {
                        if (result.ErrorMessage) {
                            reject(new Error(result.ErrorMessage));
                        } else if (result.SessionId) {
                            _this2.session = result.SessionId;
                            resolve(result.SessionId);
                        } else {
                            reject(new Error("Unknown error"));
                        }
                    })['catch'](function (error) {
                        return reject(error);
                    });
                }
            });
        }
    }, {
        key: 'logout',
        value: function logout() {
            return this.client.post(DataType.Response.Logout, 'logout');
        }
    }, {
        key: 'createParcelsRegistry',
        value: function createParcelsRegistry(parameters) {
            return this.client.post(DataType.Response.ParcelsRegistry, 'createsending', parameters);
        }
    }, {
        key: 'createParcelsRegistryMulti',
        value: function createParcelsRegistryMulti(parameters) {
            return this.client.post(DataType.Response.ParcelsRegistryMulti, 'CreateShipment', parameters);
        }
    }, {
        key: 'createParcelReturn',
        value: function createParcelReturn(parameters) {
            return this.client.post(DataType.Response.ReturnParcel, 'makereturn', parameters);
        }
    }, {
        key: 'getReturnInvoiceList',
        value: function getReturnInvoiceList(parameters) {
            return this.client.post(DataType.Response.ReturnInvoiceList, 'getreturninvoiceslist', parameters);
        }
    }, {
        key: 'getParcelHistory',
        value: function getParcelHistory(parameters) {
            return this.client.post(DataType.Response.ParcelHistory, 'tracksending', parameters);
        }
    }, {
        key: 'getParcel',
        value: function getParcel(parameters) {
            return this.client.post(DataType.Response.Parcel, 'sendinginfo', parameters);
        }
    }, {
        key: 'getParcelDeliveryCost',
        value: function getParcelDeliveryCost(parameters) {
            return this.client.post(DataType.Response.ParcelDeliveryCost, 'getdeliverycost', parameters);
        }
    }, {
        key: 'callCourier',
        value: function callCourier(parameters) {
            return this.client.post(DataType.Response.RegisteredCourier, 'courier', parameters);
        }
    }, {
        key: 'cancelCourier',
        value: function cancelCourier(parameters) {
            return this.client.post(DataType.Response.CancelledCourier, 'couriercancel', parameters);
        }
    }, {
        key: 'createRegistryPDF',
        value: function createRegistryPDF(parameters) {
            return this.client.post(DataType.Response.File, 'makereestr', parameters);
        }
    }, {
        key: 'createRegistry',
        value: function createRegistry(parameters) {
            return this.client.post(DataType.Response.Registry, 'makereestrnumber', parameters);
        }
    }, {
        key: 'getRegistry',
        value: function getRegistry(parameters) {
            return this.client.post(DataType.Response.File, 'getreestr', parameters);
        }
    }, {
        key: 'getRegistryByParcelNumber',
        value: function getRegistryByParcelNumber(parameters) {
            return this.client.post(DataType.Response.RegistryNumber, 'getreestrnumber', parameters);
        }
    }, {
        key: 'createLabels',
        value: function createLabels(parameters) {
            return this.client.post(DataType.Response.File, 'makelabel', parameters);
        }
    }, {
        key: 'getCities',
        value: function getCities() {
            return this.client.get(DataType.Response.CityList, 'citylist');
        }
    }, {
        key: 'getPostamatList',
        value: function getPostamatList() {
            return this.client.get(DataType.Response.PostamatList, 'postamatlist');
        }
    }, {
        key: 'getZones',
        value: function getZones(parameters) {
            return this.client.post(DataType.Response.Zones, 'getzone', parameters);
        }
    }, {
        key: 'getReturnDocuments',
        value: function getReturnDocuments(parameters) {
            return this.client.post(DataType.Response.ReturnDocuments, 'getreturn', parameters);
        }
    }, {
        key: 'calculate',
        value: function calculate(parameters) {
            return this.client.post(DataType.Response.Calculate, 'calctariff', parameters);
        }
    }, {
        key: 'getRate',
        value: function getRate(zone, factor, width, height, length, weight) {
            var discount = arguments.length <= 6 || arguments[6] === undefined ? false : arguments[6];

            return _rate2['default'].calculate(zone, factor, width, height, length, weight, discount);
        }
    }]);

    return API;
})();

exports['default'] = API;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJBUEkiLCJBUEkuY29uc3RydWN0b3IiLCJBUEkubG9naW4iLCJBUEkubG9nb3V0IiwiQVBJLmNyZWF0ZVBhcmNlbHNSZWdpc3RyeSIsIkFQSS5jcmVhdGVQYXJjZWxzUmVnaXN0cnlNdWx0aSIsIkFQSS5jcmVhdGVQYXJjZWxSZXR1cm4iLCJBUEkuZ2V0UmV0dXJuSW52b2ljZUxpc3QiLCJBUEkuZ2V0UGFyY2VsSGlzdG9yeSIsIkFQSS5nZXRQYXJjZWwiLCJBUEkuZ2V0UGFyY2VsRGVsaXZlcnlDb3N0IiwiQVBJLmNhbGxDb3VyaWVyIiwiQVBJLmNhbmNlbENvdXJpZXIiLCJBUEkuY3JlYXRlUmVnaXN0cnlQREYiLCJBUEkuY3JlYXRlUmVnaXN0cnkiLCJBUEkuZ2V0UmVnaXN0cnkiLCJBUEkuZ2V0UmVnaXN0cnlCeVBhcmNlbE51bWJlciIsIkFQSS5jcmVhdGVMYWJlbHMiLCJBUEkuZ2V0Q2l0aWVzIiwiQVBJLmdldFBvc3RhbWF0TGlzdCIsIkFQSS5nZXRab25lcyIsIkFQSS5nZXRSZXR1cm5Eb2N1bWVudHMiLCJBUEkuY2FsY3VsYXRlIiwiQVBJLmdldFJhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozt1QkFFcUIsV0FBVzs7d0JBQ04sWUFBWTs7SUFBMUIsUUFBUTs7b0JBQ0gsUUFBUTs7OztJQU96QixHQUFBO0FBS0lBLGFBTEosR0FBQSxDQUtnQkEsS0FBWUEsRUFBRUEsUUFBZUEsRUFBa0JBOzs7WUFBaEJBLE9BQU9BLHlEQUFPQSxFQUFFQTs7OEJBTC9ELEdBQUE7O0FBTVFDLFlBQUlBLENBQUNBLE1BQU1BLEdBQUdBLHFCQUFZQSxDQUFDQTtBQUMzQkEsWUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsRUFBQ0EsS0FBS0EsRUFBTEEsS0FBS0EsRUFBRUEsUUFBUUEsRUFBUkEsUUFBUUEsRUFBQ0EsQ0FBQ0E7QUFDckNBLFlBQUlBLENBQUNBLE1BQU1BLENBQUNBLGlCQUFpQkEsQ0FBQ0Es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QSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtTQUMzRUE7OztlQVFpQnBCLDRCQUFDQSxVQUEwQ0EsRUFBQUE7QUFDekRxQixtQkFBT0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUEsRUFBRUEsV0FBV0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7U0FDdkZBOzs7ZUFXUXJCLG1CQUFDQSxVQUEwQ0EsRUFBQUE7QUFDaERzQixtQkFBT0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsRUFBRUEsWUFBWUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7U0FDbEZBOzs7ZUFXTXRCLGlCQUFDQSxJQUFXQSxFQUFFQSxNQUFhQSxFQUFFQSxLQUFZQSxFQUFFQSxNQUFhQSxFQUFFQSxNQUFhQSxFQUFFQSxNQUFhQSxFQUEwQkE7Z0JBQXhCQSxRQUFRQSx5REFBV0EsS0FBS0E7O0FBQ25IdUIsbUJBQU9BLGtCQUFLQSxTQUFTQSxDQUFDQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxNQUFNQSxFQUFFQSxNQUFNQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtTQUNoRkE7OztXQTdSTCxHQUFBOzs7cUJBQUEsR0FBQSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3JlcXVlc3QudHNcIiAvPlxyXG5cclxuaW1wb3J0IHtDbGllbnR9IGZyb20gJy4vcmVxdWVzdCc7XHJcbmltcG9ydCAqIGFzIERhdGFUeXBlIGZyb20gJy4vZGF0YXR5cGUnO1xyXG5pbXBvcnQgcmF0ZSBmcm9tICcuL3JhdGUnO1xyXG5cclxuaW50ZXJmYWNlIENyZWRlbnRpYWxzIHtcclxuICAgIGxvZ2luOnN0cmluZztcclxuICAgIHBhc3N3b3JkOnN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQVBJIHtcclxuICAgIGNsaWVudDpDbGllbnQ7XHJcbiAgICBjcmVkZW50aWFsczpDcmVkZW50aWFscztcclxuICAgIHNlc3Npb246c3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxvZ2luOnN0cmluZywgcGFzc3dvcmQ6c3RyaW5nLCBvcHRpb25zOmFueSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQ2xpZW50KCk7XHJcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHtsb2dpbiwgcGFzc3dvcmR9O1xyXG4gICAgICAgIHRoaXMuY2xpZW50LnNldFNlc3Npb25IYW5kbGVyKCgpID0+IHsgcmV0dXJuIHRoaXMubG9naW4oKSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQvdCw0YfQsNC70LAg0YHQtdCw0L3RgdCwINGA0LDQsdC+0YLRiy4g0JIg0LfQsNC/0YDQvtGB0LUg0L7RgtC/0YDQsNCy0LvRj9C10LzRgdGPINC70L7Qs9C40L0g0Lgg0L/QsNGA0L7Qu9GMLFxyXG4gICAgICog0LIg0YHQu9GD0YfQsNC1INC/0YDQsNCy0LjQu9GM0L3QvtGB0YLQuCwg0LLQvtC30LLRgNCw0YnQsNC10YLRgdGPINGD0L3QuNC60LDQu9GM0L3Ri9C5INC90L7QvNC10YAg0YHQtdGB0YHQuNC4LCDQutC+0YLQvtGA0YvQuSDQtNC10LnRgdGC0LLQuNGC0LXQu9C10L0g0LIg0YLQtdGH0LXQvdC40Lgg0YPRgdGC0LDQvdC+0LLQu9C10L3QvdC+0LPQviDQstGA0LXQvNC10L3QuC5cclxuICAgICAqINCS0YHRjyDQtNCw0LvRjNC90LXQudGI0LDRjyDRgNCw0LHQvtGC0LAg0LLQtdC00LXRgtGB0Y8g0L3QsCDQvtGB0L3QvtCy0LDQvdC40Lgg0L3QvtC80LXRgNCwINGB0LXRgdGB0LjQuC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGxvZ2luKCk6UHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXNzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuc2Vzc2lvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5jYWxsPHtFcnJvck1lc3NhZ2U/OnN0cmluZywgU2Vzc2lvbklkPzpzdHJpbmd9Pih7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnbG9naW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9naW46IHRoaXMuY3JlZGVudGlhbHMubG9naW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBhc3N3b3JkOiB0aGlzLmNyZWRlbnRpYWxzLnBhc3N3b3JkXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5FcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXN1bHQuRXJyb3JNZXNzYWdlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuU2Vzc2lvbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vzc2lvbiA9IHJlc3VsdC5TZXNzaW9uSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LlNlc3Npb25JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVua25vd24gZXJyb3JcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQt9Cw0LLQtdGA0YjQtdC90LjRjyDRgdC10LDQvdGB0LAg0YDQsNCx0L7RgtGLLlxyXG4gICAgICog0JIg0LfQsNC/0YDQvtGB0LUg0L7RgtC/0YDQsNCy0LvRj9C10YLRgdGPINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGB0LXRgdGB0LjQuC4g0JIg0L7RgtCy0LXRgiDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0L/RgNC40LfQvdCw0Log0YPRgdC/0LXRiNC90L7RgdGC0Lgg0LLRi9C/0L7Qu9C90LXQvdC40Y8uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGxvZ291dCgpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuTG9nb3V0PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuTG9nb3V0LCAnbG9nb3V0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0YDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQvtGC0L/RgNCw0LLQu9C10L3QuNC5LiDQndCwINCy0YXQvtC0INC/0YDQuNC90LjQvNCw0LXRgtGB0Y8g0YHRgtGA0YPQutGC0YPRgNCwLFxyXG4gICAgICog0YHQvtC00LXRgNC20LDRidCw0Y8g0L3QvtC80LXRgCDRgdC10YHRgdC40Lgg0Lgg0YHQv9C40YHQvtC6INC+0L/QuNGB0LDQvdC40Lkg0L7RgtC/0YDQsNCy0LvQtdC90LjQuSwg0LrQvtGC0L7RgNGL0LUg0YLRgNC10LHRg9C10YLRgdGPINC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDRgtGMLlxyXG4gICAgICpcclxuICAgICAqINCS0L3QuNC80LDQvdC40LUhINCSINGB0LvRg9GH0LDQtSDQtdGB0LvQuCDQstC40LQg0L7RgtC/0YDQsNCy0LvQtdC90LjRjyAo0L3QsNC70L7QttC10L3QvdC+0LUv0L/RgNC10LTQvtC/0LvQsNGH0LXQvdC90L7QtSkg0L3QtSDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0LXRgiDQt9C90LDRh9C10L3QuNGOINCyINC/0L7Qu9C1IFN1bSxcclxuICAgICAqINC/0YDQuNC+0YDQuNGC0LXRgiDQvtGC0LTQsNC10YLRgdGPINC30L3QsNGH0LXQvdC40Y4g0LIgU3VtLiDQotC+INC10YHRgtGMLCDQtdGB0LvQuCDRg9C60LDQt9Cw0L3QsCDQvdC1INC90YPQu9C10LLQsNGPINC/0L7Qu9C+0LbQuNGC0LXQu9GM0L3QsNGPINGB0YPQvNC80LAsINC+0YLQv9GA0LDQstC70LXQvdC40LUg0LHRg9C00LXRglxyXG4gICAgICog0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L4g0LrQsNC6INC90LDQu9C+0LbQtdC90L3Ri9GFINC/0LvQsNGC0LXQtiDQuCDQvdCw0L7QsdC+0YDQvtGCLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlUGFyY2Vsc1JlZ2lzdHJ5KHBhcmFtZXRlcnM6RGF0YVR5cGUuUmVxdWVzdC5QYXJjZWxzUmVnaXN0cnkpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuUGFyY2Vsc1JlZ2lzdHJ5PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuUGFyY2Vsc1JlZ2lzdHJ5LCAnY3JlYXRlc2VuZGluZycsIHBhcmFtZXRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC80LDQvdC00LAg0L/RgNC10LTQvdCw0LfQvdCw0YfQtdC90LAg0LTQu9GPINGA0LXQs9C40YHRgtGA0LDRhtC40Lgg0L7RgtC/0YDQsNCy0LvQtdC90LjQuS4g0J3QsCDQstGF0L7QtCDQv9GA0LjQvdC40LzQsNC10YLRgdGPINGB0YLRgNGD0LrRgtGD0YDQsCxcclxuICAgICAqINGB0L7QtNC10YDQttCw0YnQsNGPINC90L7QvNC10YAg0YHQtdGB0YHQuNC4INC4INGB0L/QuNGB0L7QuiDQvtC/0LjRgdCw0L3QuNC5INC+0YLQv9GA0LDQstC70LXQvdC40LksINC60L7RgtC+0YDRi9C1INGC0YDQtdCx0YPQtdGC0YHRjyDQt9Cw0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0YLRjC5cclxuICAgICAqXHJcbiAgICAgKiDQktC90LjQvNCw0L3QuNC1ISDQkiDRgdC70YPRh9Cw0LUg0LXRgdC70Lgg0LLQuNC0INC+0YLQv9GA0LDQstC70LXQvdC40Y8gKNC90LDQu9C+0LbQtdC90L3QvtC1L9C/0YDQtdC00L7Qv9C70LDRh9C10L3QvdC+0LUpINC90LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9C10YIg0LfQvdCw0YfQtdC90LjRjiDQsiDQv9C+0LvQtSBTdW0sXHJcbiAgICAgKiDQv9GA0LjQvtGA0LjRgtC10YIg0L7RgtC00LDQtdGC0YHRjyDQt9C90LDRh9C10L3QuNGOINCyIFN1bS4g0KLQviDQtdGB0YLRjCwg0LXRgdC70Lgg0YPQutCw0LfQsNC90LAg0L3QtSDQvdGD0LvQtdCy0LDRjyDQv9C+0LvQvtC20LjRgtC10LvRjNC90LDRjyDRgdGD0LzQvNCwLCDQvtGC0L/RgNCw0LLQu9C10L3QuNC1INCx0YPQtNC10YJcclxuICAgICAqINC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDQvdC+INC60LDQuiDQvdCw0LvQvtC20LXQvdC90YvRhSDQv9C70LDRgtC10LYg0Lgg0L3QsNC+0LHQvtGA0L7Rgi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVBhcmNlbHNSZWdpc3RyeU11bHRpKHBhcmFtZXRlcnM6RGF0YVR5cGUuUmVxdWVzdC5QYXJjZWxzUmVnaXN0cnlNdWx0aSk6UHJvbWlzZTxEYXRhVHlwZS5SZXNwb25zZS5QYXJjZWxzUmVnaXN0cnlNdWx0aT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KERhdGFUeXBlLlJlc3BvbnNlLlBhcmNlbHNSZWdpc3RyeU11bHRpLCAnQ3JlYXRlU2hpcG1lbnQnLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC+0YLQv9GA0LDQstC70LXQvdC40Y8g0LrQu9C40LXQvdGC0YHQutC+0LPQviDQstC+0LfQstGA0LDRgtCwINC90LAg0L7RgdC90L7QstC1INC+0LHRi9GH0L3QvtCz0L4g0L7RgtC/0YDQsNCy0LvQtdC90LjRjy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVBhcmNlbFJldHVybihwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuUmV0dXJuUGFyY2VsKTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlJldHVyblBhcmNlbD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KERhdGFUeXBlLlJlc3BvbnNlLlJldHVyblBhcmNlbCwgJ21ha2VyZXR1cm4nLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHQv9C40YHQutCwINCy0L7Qt9Cy0YDQsNGC0L3Ri9GFINC+0YLQv9GA0LDQstC70LXQvdC40LksINC60L7RgtC+0YDRi9C1INGA0LDQvdC10LUg0L3QtSDQv9GA0L7RhdC+0LTQuNC70Lgg0YfQtdGA0LXQtyBQaWNrUG9pbnQuXHJcbiAgICAgKiDQkiDQt9Cw0L/RgNC+0YHQtSDQvtGC0L/RgNCw0LLQu9GP0LXRgtGB0Y8g0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YHQtdGB0YHQuNC4INC4INC40L3RgtC10YDQstCw0Lsg0LTQsNGCLCDQt9CwINC60L7RgtC+0YDRi9C1INC90LXQvtCx0YXQvtC00LjQvNC+INC/0L7Qu9GD0YfQuNGC0Ywg0YHQv9C40YHQvtC6LlxyXG4gICAgICog0JIg0L7RgtCy0LXRgiDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0YHQv9C40YHQvtC6INC+0YLQv9GA0LDQstC70LXQvdC40Lkg0YEg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCwg0LvQuNCx0L4g0L7RiNC40LHQutCwLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0UmV0dXJuSW52b2ljZUxpc3QocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LlJldHVybkludm9pY2VMaXN0KTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlJldHVybkludm9pY2VMaXN0PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuUmV0dXJuSW52b2ljZUxpc3QsICdnZXRyZXR1cm5pbnZvaWNlc2xpc3QnLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0LjRgdGC0L7RgNC40Lgg0LjQt9C80LXQvdC10L3QuNGPINGB0YLQsNGC0YPRgdCwINC+0YLQv9GA0LDQstC70LXQvdC40Y8uINCSINC30LDQv9GA0L7RgdC1INC+0YLQv9GA0LDQstC70Y/QtdGC0YHRjyDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICog0YHQtdGB0YHQuNC4INC4INC90L7QvNC10YAg0L7RgtC/0YDQsNCy0LvQtdC90LjRjy4g0JIg0L7RgtCy0LXRgiDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0LjRgdGC0L7RgNC40Y8g0YHRgtCw0YLRg9GB0L7QsiDQvtGC0L/RgNCw0LLQu9C10L3QuNGPLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0UGFyY2VsSGlzdG9yeShwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuUGFyY2VsSW52b2ljZUhpc3RvcnkpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuUGFyY2VsSGlzdG9yeT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KERhdGFUeXBlLlJlc3BvbnNlLlBhcmNlbEhpc3RvcnksICd0cmFja3NlbmRpbmcnLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0LjQvdGE0L7RgNC80LDRhtC40Lgg0L/QviDQvtGC0L/RgNCw0LLQu9C10L3QuNGOINC+0YLQv9GA0LDQstC70LXQvdC40Y8uINCSINC30LDQv9GA0L7RgdC1INC+0YLQv9GA0LDQstC70Y/QtdGC0YHRjyDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgFxyXG4gICAgICog0YHQtdGB0YHQuNC4INC4INC90L7QvNC10YAg0L7RgtC/0YDQsNCy0LvQtdC90LjRjy4g0JIg0L7RgtCy0LXRgiDQstC+0LfQstGA0LDRidCw0LXRgtGB0Y8g0L/RgNC40LfQvdCw0Log0YPRgdC/0LXRiNC90L7RgdGC0Lgg0LLRi9C/0L7Qu9C90LXQvdC40Y8uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnNcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fVxyXG4gICAgICovXHJcbiAgICBnZXRQYXJjZWwocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LlBhcmNlbEludm9pY2UpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuUGFyY2VsPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuUGFyY2VsLCAnc2VuZGluZ2luZm8nLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHRgtC+0LjQvNC+0YHRgtC4INC00L7RgdGC0LDQstC60Lgg0L7RgtC/0YDQsNCy0LvQtdC90LjRjy4g0JIg0LfQsNC/0YDQvtGB0LUg0L7RgtC/0YDQsNCy0LvRj9C10YLRgdGPINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGB0LXRgdGB0LjQuFxyXG4gICAgICog0Lgg0YHQv9C40YHQvtC6INC90L7QvNC10YDQvtCyINC+0YLQv9GA0LDQstC70LXQvdC40LkuINCSINC+0YLQstC10YIg0LLQvtC30LLRgNCw0YnQsNC10YLRgdGPINGB0L/QuNGB0L7QuiDQvdC+0LzQtdGA0L7QsiDQvtGC0L/RgNCw0LLQu9C10L3QuNC5INGB0L4g0YHRgtC+0LjQvNC+0YHRgtGP0LzQuCDQtNC+0YHRgtCw0LLQvtC6LlxyXG4gICAgICog0KHRgtC+0LjQvNC+0YHRgtGMINC00L7RgdGC0LDQstC60Lgg0YHRgtCw0L3QvtCy0LjRgtGB0Y8g0LTQvtGB0YLRg9C/0L3QsCDQvdCwINGB0LvQtdC00YPRjtGJ0LjQuSDQtNC10L3RjCDQv9C+0YHQu9C1INGA0LXQs9C40YHRgtGA0LDRhtC40Lgg0L7RgtC/0YDQsNCy0LvQtdC90LjRjy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGdldFBhcmNlbERlbGl2ZXJ5Q29zdChwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuUGFyY2VsRGVsaXZlcnlDb3N0KTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlBhcmNlbERlbGl2ZXJ5Q29zdD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KERhdGFUeXBlLlJlc3BvbnNlLlBhcmNlbERlbGl2ZXJ5Q29zdCwgJ2dldGRlbGl2ZXJ5Y29zdCcsIHBhcmFtZXRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC80LDQvdC00LAg0L/RgNC10LTQvdCw0LfQvdCw0YfQtdC90LAg0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0LLRi9C30L7QstCwINC60YPRgNGM0LXRgNCwLiDQndCwINCy0YXQvtC0INC/0YDQuNC90LjQvNCw0LXRgtGB0Y8g0YHRgtGA0YPQutGC0YPRgNCwLCDRgdC+0LTQtdGA0LbQsNGJ0LDRjyDQvdC+0LzQtdGAINGB0LXRgdGB0LjQuFxyXG4gICAgICog0Lgg0L7Qv9C40YHQsNC90LjRjyDQsNC00YDQtdGB0LAg0LfQsNCx0L7RgNCwLCDQstGA0LXQvNC10L3QuCDQt9Cw0LHQvtGA0LAsINC60L7Qu9C40YfQtdGB0YLQstCwINC80LXRgdGCINC4INC+0LHRidC40Lkg0LLQtdGBLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgY2FsbENvdXJpZXIocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LkNhbGxDb3VyaWVyKTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlJlZ2lzdGVyZWRDb3VyaWVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuUmVnaXN0ZXJlZENvdXJpZXIsICdjb3VyaWVyJywgcGFyYW1ldGVycyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0L7RgtC80LXQvdGLINCy0YvQt9C+0LLQsCDQutGD0YDRjNC10YDQsC4g0J3QsCDQstGF0L7QtCDQv9GA0LjQvdC40LzQsNC10YLRgdGPINGB0YLRgNGD0LrRgtGD0YDQsCwg0YHQvtC00LXRgNC20LDRidCw0Y8g0L3QvtC80LXRgCDRgdC10YHRgdC40LhcclxuICAgICAqINC4INC90L7QvNC10YAg0LLRi9C30L7QstCwINC60YPRgNGM0LXRgNCwLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgY2FuY2VsQ291cmllcihwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuQ2FuY2VsQ291cmllcik6UHJvbWlzZTxEYXRhVHlwZS5SZXNwb25zZS5DYW5jZWxsZWRDb3VyaWVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuQ2FuY2VsbGVkQ291cmllciwgJ2NvdXJpZXJjYW5jZWwnLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YDQtdC10YHRgtGA0LAg0LIg0YTQvtGA0LzQsNGC0LUgcGRmLlxyXG4gICAgICog0J3QsCDQstGF0L7QtCDQv9GA0LjQvdC40LzQsNC10YLRgdGPINGB0YLRgNGD0LrRgtGD0YDQsCwg0YHQvtC00LXRgNC20LDRidCw0Y8g0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YHQtdGB0YHQuNC4INC4INGB0L/QuNGB0L7QuiDQvdC+0LzQtdGA0L7QsiDQvtGC0L/RgNCw0LLQu9C10L3QuNC5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlUmVnaXN0cnlQREYocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LkNyZWF0ZVJlZ2lzdHJ5KTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLkZpbGU+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChEYXRhVHlwZS5SZXNwb25zZS5GaWxlLCAnbWFrZXJlZXN0cicsIHBhcmFtZXRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC80LDQvdC00LAg0L/RgNC10LTQvdCw0LfQvdCw0YfQtdC90LAg0LTQu9GPINGB0L7Qt9C00LDQvdC40Y8g0YDQtdC10YHRgtGA0LAg0Lgg0L/QvtC70YPRh9C10L3QuNGPINC90L7QvNC10YDQsCDRgNC10LXRgdGC0YDQsC5cclxuICAgICAqINCd0LAg0LLRhdC+0LQg0L/RgNC40L3QuNC80LDQtdGC0YHRjyDRgdGC0YDRg9C60YLRg9GA0LAsINGB0L7QtNC10YDQttCw0YnQsNGPINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGB0LXRgdGB0LjQuCDQuCDRgdC/0LjRgdC+0Log0L3QvtC80LXRgNC+0LIg0L7RgtC/0YDQsNCy0LvQtdC90LjQuS5cclxuICAgICAqINCd0LAg0LLRi9GF0L7QtCDQstGL0LTQsNC10YLRgdGPINGB0L/QuNGB0L7QuiDQvdC+0LzQtdGA0L7QsiDRgdC+0LfQtNCw0L3QvdGL0YUg0YDQtdC10YHRgtGA0L7QsiDQuNC70Lgg0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlUmVnaXN0cnkocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LkNyZWF0ZVJlZ2lzdHJ5KTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlJlZ2lzdHJ5PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuUmVnaXN0cnksICdtYWtlcmVlc3RybnVtYmVyJywgcGFyYW1ldGVycyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGA0LXQtdGB0YLRgNCwINCyINGE0L7RgNC80LDRgtC1IHBkZi4g0J3QsCDQstGF0L7QtCDQv9GA0LjQvdC40LzQsNC10YLRgdGPINGB0YLRgNGD0LrRgtGD0YDQsCxcclxuICAgICAqINGB0L7QtNC10YDQttCw0YnQsNGPINC40LTQtdC90YLQuNGE0LjQutCw0YLQvtGAINGB0LXRgdGB0LjQuCDQuCDQvdC+0LzQtdGAINC+0YLQv9GA0LDQstC70LXQvdC40Y8g0LjQu9C4INC90L7QvNC10YAg0YDQtdC10YHRgtGA0LAuINCV0YHQu9C4INGD0LrQsNC30LDQvdC90L7QtSDQvtGC0L/RgNCw0LLQu9C10L3QuNC1XHJcbiAgICAgKiDQvdC1INGB0L7QtNC10YDQttC40YLRgdGPINC90Lgg0LIg0L7QtNC90L7QvCDRgNC10LXRgdGC0YDQtSDQuNC70Lgg0L3QtdGCINGA0LXQtdGB0YLRgNCwINGBINGD0LrQsNC30LDQvdC90YvQvCDQvdC+0LzQtdGA0L7QvCwg0LLQtdGA0L3QtdGC0YHRjyDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0Y7RidC10LUg0YHQvtC+0LHRidC10L3QuNC1LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0UmVnaXN0cnkocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LlJlZ2lzdHJ5KTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLkZpbGU+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChEYXRhVHlwZS5SZXNwb25zZS5GaWxlLCAnZ2V0cmVlc3RyJywgcGFyYW1ldGVycyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC90L7QvNC10YDQsCDRgNC10LXRgdGC0YDQsC4g0J3QsCDQstGF0L7QtCDQv9GA0LjQvdC40LzQsNC10YLRgdGPINGB0YLRgNGD0LrRgtGD0YDQsCwg0YHQvtC00LXRgNC20LDRidCw0Y8g0LjQtNC10L3RgtC40YTQuNC60LDRgtC+0YAg0YHQtdGB0YHQuNC4XHJcbiAgICAgKiDQuCDQvdC+0LzQtdGAINC+0YLQv9GA0LDQstC70LXQvdC40Y8uINCV0YHQu9C4INGD0LrQsNC30LDQvdC90L7QtSDQvtGC0L/RgNCw0LLQu9C10L3QuNC1INC90LUg0YHQvtC00LXRgNC20LjRgtGB0Y8g0L3QuCDQsiDQvtC00L3QvtC8INGA0LXQtdGB0YLRgNC1INC40LvQuCDQvdC10YIg0YDQtdC10YHRgtGA0LAg0YEg0YPQutCw0LfQsNC90L3Ri9C8INC90L7QvNC10YDQvtC8LFxyXG4gICAgICog0LLQtdGA0L3QtdGC0YHRjyDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0Y7RidC10LUg0YHQvtC+0LHRidC10L3QuNC1LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0UmVnaXN0cnlCeVBhcmNlbE51bWJlcihwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuUGFyY2VsSW52b2ljZSk6UHJvbWlzZTxEYXRhVHlwZS5SZXNwb25zZS5SZWdpc3RyeU51bWJlcj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5wb3N0KERhdGFUeXBlLlJlc3BvbnNlLlJlZ2lzdHJ5TnVtYmVyLCAnZ2V0cmVlc3RybnVtYmVyJywgcGFyYW1ldGVycyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGN0YLQuNC60LXRgtC+0Log0L7RgtC/0YDQsNCy0LvQtdC90LjQuSDQsiDRhNC+0YDQvNCw0YLQtSBwZGYuINCd0LAg0LLRhdC+0LQg0L/RgNC40L3QuNC80LDQtdGC0YHRjyDRgdGC0YDRg9C60YLRg9GA0LAsINGB0L7QtNC10YDQttCw0YnQsNGPXHJcbiAgICAgKiDQuNC00LXQvdGC0LjRhNC40LrQsNGC0L7RgCDRgdC10YHRgdC40Lgg0Lgg0YHQv9C40YHQvtC6INC90L7QvNC10YDQvtCyINC+0YLQv9GA0LDQstC70LXQvdC40LkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnNcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVMYWJlbHMocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LkNyZXRhZUxhYmVscyk6UHJvbWlzZTxEYXRhVHlwZS5SZXNwb25zZS5GaWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuRmlsZSwgJ21ha2VsYWJlbCcsIHBhcmFtZXRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog0JrQvtC80LDQvdC00LAg0L/RgNC10LTQvdCw0LfQvdCw0YfQtdC90LAg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDRgdC/0LjRgdC60LAg0LPQvtGA0L7QtNC+0LIuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGdldENpdGllcygpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuQ2l0eUxpc3Q+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuZ2V0KERhdGFUeXBlLlJlc3BvbnNlLkNpdHlMaXN0LCAnY2l0eWxpc3QnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHQv9C40YHQutCwINC/0L7RgdGC0LDQvNCw0YLQvtCyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fVxyXG4gICAgICovXHJcbiAgICBnZXRQb3N0YW1hdExpc3QoKTpQcm9taXNlPERhdGFUeXBlLlJlc3BvbnNlLlBvc3RhbWF0TGlzdD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5nZXQoRGF0YVR5cGUuUmVzcG9uc2UuUG9zdGFtYXRMaXN0LCAncG9zdGFtYXRsaXN0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDQmtC+0LzQsNC90LTQsCDQv9GA0LXQtNC90LDQt9C90LDRh9C10L3QsCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGB0L/QuNGB0LrQsCDQt9C+0L0uXHJcbiAgICAgKiDQldGB0LvQuCDQv9C+0LvQtSBUb1BUINC90LUg0YPQutCw0LfQsNC90L4sINCy0L7Qt9Cy0YDQsNGJ0LDQtdGC0YHRjyDRgdC/0LjRgdC+0Log0LfQvtC9INC/0L4g0LLRgdC10Lwg0L/Rg9C90LrRgtCw0Lwg0LLRi9C00LDRh9C4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0Wm9uZXMocGFyYW1ldGVyczpEYXRhVHlwZS5SZXF1ZXN0LlpvbmVzUXVlcnkpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuWm9uZXM+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChEYXRhVHlwZS5SZXNwb25zZS5ab25lcywgJ2dldHpvbmUnLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L3QvtC80LXRgNCwINCy0L7Qt9Cy0YDQsNGC0L3QvtC5INC90LDQutC70LDQtNC90L7QuSDQuCwg0LXRgdC70Lgg0LXRgdGC0YwsINC90L7QvNC10YDQsCDQsNC60YLQsCDQstC+0LfQstGA0LDRgtCwLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn1cclxuICAgICAqL1xyXG4gICAgZ2V0UmV0dXJuRG9jdW1lbnRzKHBhcmFtZXRlcnM6RGF0YVR5cGUuUmVxdWVzdC5SZXR1cm5JbnZvaWNlcyk6UHJvbWlzZTxEYXRhVHlwZS5SZXNwb25zZS5SZXR1cm5Eb2N1bWVudHM+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQucG9zdChEYXRhVHlwZS5SZXNwb25zZS5SZXR1cm5Eb2N1bWVudHMsICdnZXRyZXR1cm4nLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqINCa0L7QvNCw0L3QtNCwINC/0YDQtdC00L3QsNC30L3QsNGH0LXQvdCwINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHRgtC+0LjQvNC+0YHRgtC4INC00L7RgdGC0LDQstC60LguINCf0YDQuCDRgNCw0YHRh9C10YLQtSDRg9GH0LjRgtGL0LLQsNGO0YLRgdGPINGB0LvQtdC00YPRjtGJ0LjQtSDQvtCz0YDQsNC90LjRh9C10L3QuNGPOlxyXG4gICAgICogICAgICDQs9Cw0LHQsNGA0LjRgtGLINGD0LrQsNC30YvQstCw0Y7RgtGB0Y8g0L7QsdGJ0LjQtSDQvdCwINCy0YHQtSDQvNC10YHRgtCwLFxyXG4gICAgICogICAgICDQstC10YEg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y4g0YHRh9C40YLQsNC10YLRgdGPIDEg0LrQsyxcclxuICAgICAqICAgICAg0YDQsNGB0YHRh9C40YLRi9Cy0LDQtdGC0YHRjyDRgtC+0LvRjNC60L4g0YLQsNGA0LjRhCDQt9CwINC70L7Qs9C40YHRgtC40LrRgy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8VD59XHJcbiAgICAgKi9cclxuICAgIGNhbGN1bGF0ZShwYXJhbWV0ZXJzOkRhdGFUeXBlLlJlcXVlc3QuQ2FsY3VsYXRlUXVlcnkpOlByb21pc2U8RGF0YVR5cGUuUmVzcG9uc2UuQ2FsY3VsYXRlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnBvc3QoRGF0YVR5cGUuUmVzcG9uc2UuQ2FsY3VsYXRlLCAnY2FsY3RhcmlmZicsIHBhcmFtZXRlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHpvbmVcclxuICAgICAqIEBwYXJhbSBmYWN0b3JcclxuICAgICAqIEBwYXJhbSB3aWR0aFxyXG4gICAgICogQHBhcmFtIGhlaWdodFxyXG4gICAgICogQHBhcmFtIGxlbmd0aFxyXG4gICAgICogQHBhcmFtIHdlaWdodFxyXG4gICAgICogQHBhcmFtIGRpc2NvdW50XHJcbiAgICAgKi9cclxuICAgIGdldFJhdGUoem9uZTpudW1iZXIsIGZhY3RvcjpudW1iZXIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlciwgbGVuZ3RoOm51bWJlciwgd2VpZ2h0Om51bWJlciwgZGlzY291bnQ6Ym9vbGVhbiA9IGZhbHNlKTpudW1iZXIge1xyXG4gICAgICAgIHJldHVybiByYXRlLmNhbGN1bGF0ZSh6b25lLCBmYWN0b3IsIHdpZHRoLCBoZWlnaHQsIGxlbmd0aCwgd2VpZ2h0LCBkaXNjb3VudCk7XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6ImQ6XFx3d3dcXGRlbGl2ZXJ5XFxwaWNrcG9pbnRcXGJ1aWxkLXRzIn0=