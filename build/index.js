'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _request = require('./request');

var _datatype = require('./datatype');

var DataType = _interopRequireWildcard(_datatype);

var _rate = require('./rate');

var _rate2 = _interopRequireDefault(_rate);

var API = (function () {
    function API(login, password) {
        var _this = this;

        var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

        _classCallCheck(this, API);

        this.client = new _request.Client();
        this.credentials = { login: login, password: password };
        this.client.setSessionHandler(function () {
            return _this.login();
        });
    }

    _createClass(API, [{
        key: 'login',
        value: function login() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                if (_this2.session) {
                    resolve(_this2.session);
                } else {
                    _this2.client.call({
                        method: 'POST',
                        url: 'login',
                        data: {
                            Login: _this2.credentials.login,
                            Password: _this2.credentials.password
                        }
                    }).then(function (result) {
                        if (result.ErrorMessage) {
                            reject(new Error(result.ErrorMessage));
                        } else if (result.SessionId) {
                            _this2.session = result.SessionId;
                            resolve(result.SessionId);
                        } else {
                            reject(new Error("Unknown error"));
                        }
                    })['catch'](function (error) {
                        return reject(error);
                    });
                }
            });
        }
    }, {
        key: 'logout',
        value: function logout() {
            return this.client.post(DataType.Response.Logout, 'logout');
        }
    }, {
        key: 'createParcelsRegistry',
        value: function createParcelsRegistry(parameters) {
            return this.client.post(DataType.Response.ParcelsRegistry, 'createsending', parameters);
        }
    }, {
        key: 'createParcelsRegistryMulti',
        value: function createParcelsRegistryMulti(parameters) {
            return this.client.post(DataType.Response.ParcelsRegistryMulti, 'CreateShipment', parameters);
        }
    }, {
        key: 'createParcelReturn',
        value: function createParcelReturn(parameters) {
            return this.client.post(DataType.Response.ReturnParcel, 'makereturn', parameters);
        }
    }, {
        key: 'getReturnInvoiceList',
        value: function getReturnInvoiceList(parameters) {
            return this.client.post(DataType.Response.ReturnInvoiceList, 'getreturninvoiceslist', parameters);
        }
    }, {
        key: 'getParcelHistory',
        value: function getParcelHistory(parameters) {
            return this.client.post(DataType.Response.ParcelHistory, 'tracksending', parameters);
        }
    }, {
        key: 'getParcel',
        value: function getParcel(parameters) {
            return this.client.post(DataType.Response.Parcel, 'sendinginfo', parameters);
        }
    }, {
        key: 'getParcelDeliveryCost',
        value: function getParcelDeliveryCost(parameters) {
            return this.client.post(DataType.Response.ParcelDeliveryCost, 'getdeliverycost', parameters);
        }
    }, {
        key: 'callCourier',
        value: function callCourier(parameters) {
            return this.client.post(DataType.Response.RegisteredCourier, 'courier', parameters);
        }
    }, {
        key: 'cancelCourier',
        value: function cancelCourier(parameters) {
            return this.client.post(DataType.Response.CancelledCourier, 'couriercancel', parameters);
        }
    }, {
        key: 'createRegistryPDF',
        value: function createRegistryPDF(parameters) {
            return this.client.post(DataType.Response.File, 'makereestr', parameters);
        }
    }, {
        key: 'createRegistry',
        value: function createRegistry(parameters) {
            return this.client.post(DataType.Response.Registry, 'makereestrnumber', parameters);
        }
    }, {
        key: 'getRegistry',
        value: function getRegistry(parameters) {
            return this.client.post(DataType.Response.File, 'getreestr', parameters);
        }
    }, {
        key: 'getRegistryByParcelNumber',
        value: function getRegistryByParcelNumber(parameters) {
            return this.client.post(DataType.Response.RegistryNumber, 'getreestrnumber', parameters);
        }
    }, {
        key: 'createLabels',
        value: function createLabels(parameters) {
            return this.client.post(DataType.Response.File, 'makelabel', parameters);
        }
    }, {
        key: 'createZLabels',
        value: function createZLabels(parameters) {
            return this.client.post(DataType.Response.File, 'makeZLabel', parameters);
        }
    }, {
        key: 'getCities',
        value: function getCities() {
            return this.client.get(DataType.Response.CityList, 'citylist');
        }
    }, {
        key: 'getPostamatList',
        value: function getPostamatList() {
            return this.client.get(DataType.Response.PostamatList, 'postamatlist');
        }
    }, {
        key: 'getZones',
        value: function getZones(parameters) {
            return this.client.post(DataType.Response.Zones, 'getzone', parameters);
        }
    }, {
        key: 'getReturnDocuments',
        value: function getReturnDocuments(parameters) {
            return this.client.post(DataType.Response.ReturnDocuments, 'getreturn', parameters);
        }
    }, {
        key: 'calculate',
        value: function calculate(parameters) {
            return this.client.post(DataType.Response.Calculate, 'calctariff', parameters);
        }
    }, {
        key: 'getRate',
        value: function getRate(zone, factor, width, height, length, weight) {
            var discount = arguments.length <= 6 || arguments[6] === undefined ? false : arguments[6];

            return _rate2['default'].calculate(zone, factor, width, height, length, weight, discount);
        }
    }]);

    return API;
})();

exports['default'] = API;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,